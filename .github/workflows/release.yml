name: Lint & test & build & publish release

on:
  workflow_dispatch:
  release:
    types: [released]

permissions:
  contents: write

jobs:
  lint-test:
    name: Lint & test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        id: setup-node
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - id: node-modules-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ steps.setup-node.outputs.node-version }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.setup-node.outputs.node-version }}-node_modules-

      - if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      - run: npm run lint
      - run: npm run test -- --bail

  build-jetbrains:
    name: Build for JetBrains
    needs: [lint-test]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        id: setup-node
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - id: node-modules-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ steps.setup-node.outputs.node-version }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.setup-node.outputs.node-version }}-node_modules-

      - if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      - run: npm run build:prod:jetbrains

      - uses: softprops/action-gh-release@v2
        with:
          files: dist/dist-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-web:
    name: Build for web
    needs: [lint-test]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        id: setup-node
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - id: node-modules-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ steps.setup-node.outputs.node-version }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.setup-node.outputs.node-version }}-node_modules-

      - if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      - run: npm run build:prod:web

      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist/

      - uses: actions/upload-artifact@v4
        with:
          name: nginx-config
          path: nginx.conf.template

      - uses: actions/upload-artifact@v4
        with:
          name: dockerfile
          path: Dockerfile

      - uses: softprops/action-gh-release@v2
        with:
          files: dist/dist-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  download:
    name: Build and push Docker image
    needs: [build-jetbrains, build-web]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: dist

      - uses: actions/download-artifact@v4
        with:
          name: nginx-config

      - uses: actions/download-artifact@v4
        with:
          name: dockerfile

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_DIGMAAI_USERNAME }}
          password: ${{ secrets.DOCKERHUB_DIGMAAI_TOKEN }}

      - name: Docker meta
        id: metadata # you'll use this in the next step
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: digmaai/digma-ui
          # Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=match,pattern=v(.*),group=1
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            # set latest tag for main branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
